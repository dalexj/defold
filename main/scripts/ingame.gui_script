require "main.modules.button"

local function reset_selected(self)
	if self.selected_index then
		gui.set_color(self.buttons[self.selected_index], self.default_button_color)
		self.buttons_metadata[self.selected_index].default_color = self.default_button_color
	end
end

local function update_page_buttons(self)
	local number_of_pages = math.ceil(#self.unit_names/5)
	for i = 1, 5 do
		local text_node = gui.get_node("unit_select_" .. i .. "/text")
		if (self.page * 5 + i) > #self.unit_names then
			gui.set_enabled(gui.get_node("unit_select_" .. i .. "/bg"), false)
		else
			gui.set_enabled(gui.get_node("unit_select_" .. i .. "/bg"), true)
			gui.set_text(text_node, self.unit_names[(self.page * 5) + i] .. "  x1")
		end
	end
	gui.set_enabled(self.buttons.prev_page, self.page ~= 0)
	gui.set_enabled(self.buttons.next_page, self.page < (number_of_pages - 1))
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.unit_names = {
		"hack",
		"battery",
		"hammer",
		"hammer_2",
		"man",
		"tower",
		"slower",
		"doc",
		"doc_2",
	}
	
	local button_names = {}
	for i = 1, 5 do
		button_names[i] = "unit_select_" .. i
	end
	buttons_init(self, button_names)
	
	self.hover_color = vmath.vector4(0.6, 0.6, 0.6, 1)
	self.pressed_color = vmath.vector4(0.4, 0.4, 0.4, 1)
	--self.default_button_color = vmath.vector4(0.10196078568697, 0.30196079611778, 0.30196079611778, 1)
	self.default_button_color = vmath.vector4(26/255,77/255,77/255, 1)

	self.page = 0
	self.buttons.next_page = gui.get_node("next_page")
	self.buttons_metadata.next_page = {skip_effects = true}
	self.buttons.prev_page = gui.get_node("prev_page")
	self.buttons_metadata.prev_page = {skip_effects = true}
	update_page_buttons(self)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_input(self, action_id, action)
	local function on_click(key)
		if key == "next_page" then
			self.page =  self.page + 1
			update_page_buttons(self)
			print("clicked (next page). page now " .. self.page)
		elseif key == "prev_page" then
			self.page =  self.page - 1
			update_page_buttons(self)
			print("clicked (prev page). page now " .. self.page)
		else
			reset_selected(self)
			self.selected_index = key
			gui.set_color(self.buttons[key], self.pressed_color)
			self.buttons_metadata[key].default_color = self.pressed_color
			print("clicked (" .. key .. ")")
		end
	end

	buttons_on_input(self, action_id, action, on_click)
	
end
